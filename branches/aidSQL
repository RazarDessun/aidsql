#!/usr/bin/php
<?php

	namespace aidSQL;

	/**
	 * @todo Implement spl_autoload
	 * @todo Analyze script performance with xdebug
	 *
	 */

	error_reporting(E_ALL);
	ini_set("display_errors","On");

	function checkPHPVersion(){

		$version		= substr(PHP_VERSION,0,strpos(PHP_VERSION,"."));
		$subversion	= substr(PHP_VERSION,strpos(PHP_VERSION,".")+1);
		$subversion	= substr($subversion,0,strpos($subversion,"."));

		if($version != 5 || $subversion < 3){

			return FALSE;

		}

		return TRUE;

	}

	if(!checkPHPVersion()){

		echo "Sorry but you need at least version 5.3.0 in order to run aidSQL :(\n";
		exit(1);

	}

	define ("__CLASSPATH","lib/aidSQL/");

	set_include_path(__CLASSPATH.PATH_SEPARATOR.get_include_path());



	//Interfaces
	require	"interface/Parser.interface.php";
	require	"interface/http/Adapter.interface.php";
	require	"interface/plugin/Injection.interface.php";
	require	"interface/plugin/Info.interface.php";

	//Core
	require	"class/core/String.class.php";
	require	"class/core/Dom.class.php";
	require	"class/core/Logger.class.php";
	require	"class/core/File.class.php";
	require	"class/core/Runner.class.php";
	require	"class/core/PluginLoader.class.php";
	require	"class/core/DatabaseSchema.class.php";
	require	"class/core/InjectionPlugin.class.php";
	require	"class/core/InfoPlugin.class.php";
	require	"class/core/InfoResult.class.php";

	//HTTP 
	require	"class/http/Url.class.php";
	require	"class/http/adapter/Ecurl.class.php";
	require	"class/http/Crawler.class.php";
	require	"class/http/webservice/bing/Bing.class.php";
	require	"class/http/webservice/google/Google.class.php";

	//Config 
	require	"config/config.php";
	
	//Parsers
	require	"class/parser/CmdLine.class.php";
	require	"class/parser/Nmap.class.php";

	//Functions
	require	"functions/launcher.functions.php";

	$log	=	new core\Logger();
	$log->setEcho(TRUE);

	try{

		unset($_SERVER["argv"][0]);

		$sites			=	array();
		$links			=	array();
		banner($log);
		$log->setPrepend("[aidSQL]");

		$parameters		=	mergeConfig($_SERVER["argv"],"etc/aidSQL/aidSQL.conf");

		$cmdParser		=	new parser\CmdLine();


		$cmdParser->setConfig($config);
		$cmdParser->setCmdLineOptions($parameters);

		//<fixme>
		if(preg_match("/--help-.*/",implode(" ",$parameters))){

			$cmdParser->setOption("url","http://fix.this.awful.regex.org");	
			$pluginHelpFixMe	=	TRUE;

		}
		//</fixme>

		$cmdParser->setIgnoreOptionsWith(
													array(
															"sqli-.*",
															"info-.*"
													)
		);

		$parsedOptions	=	$cmdParser->parse();
		$parameters		=	array_keys($parsedOptions);

		$pluginsDir	=	__CLASSPATH.DIRECTORY_SEPARATOR."class".DIRECTORY_SEPARATOR."plugin";

		$log->reset();
		$log->setColors((bool)$parsedOptions["colors"]);
		$log->setEcho(FALSE);

		$pLoader			=	new \aidSQL\core\PluginLoader($pluginsDir,$log);
		$allPlugins		=	$pLoader->listPlugins();
		$pluginTypes	=	$pLoader->listPluginTypes();

		//<plugin-help>

		if(isset($pluginHelpFixMe)){

			foreach($allPlugins as $plugin){

				$help	=	"help-".$plugin["type"].'-'.$plugin["name"];

				if(in_array($help,$parameters)){

					$helpFound	=	TRUE;

					$pLoader->load($plugin);
					$log->setEcho(TRUE);
					$log->setX11Info(FALSE);
					$log->setPrepend("");

					$log->log(strtoupper($plugin["type"] . " " . $plugin["name"] . " HELP")."\n",0,"light_cyan");
					$help	=	'\\'.__NAMESPACE__.'\\plugin\\'.$plugin["type"].'\\'.$plugin["name"]."::getHelp";
					call_user_func($help,$log);
					$log->log("\n");
					exit(0);

				}

			}

			foreach($parameters as $param){

				if(preg_match("/^help-.*/",$param)){
					throw (new \Exception("Help not found for $param!"));
				}

			}

		}

		//</plugin-help>

		//<help>

		if(in_array("help",$parameters)){
			$log->setEcho(TRUE);
			usageLong($log);
			exit(0);
		}	

		//</help>


		$log->setEcho(TRUE);

		if(in_array("list-plugins",$parameters)){


			$log->setPrepend("");
			$log->setX11Info(FALSE);

			foreach($pluginTypes as $pType){

				$log->log(ucwords($pType) . " Plugins",0,"light_green");
				$log->log("-------------------------------------------",0,"light_green");

				foreach($allPlugins as $plugin){

					if($pType==$plugin["type"]){

						$log->log(ucwords($plugin["name"]). "\t\t--$pType-$plugin[name]-help to get help about this plugin",0,"white");
					}

				}
				$log->log("\n");

			}	
			
		}


		if(isset($parsedOptions["log-prepend-date"])){

			$log->useLogDate($parsedOptions["log-prepend-date"]);

		}

		if(isset($parsedOptions["log-save"])){
			$log->setFilename($parsedOptions["log-save"]);
		}

		if(!empty($parsedOptions["url"])){

			$sites[0]	=	new \aidSQL\http\Url($parsedOptions["url"]); 

		}

		//Instance of the http adapter, shared by aggregation through all classes

		//<httpAdapter>

		$Adapter			=	"\\aidSQL\\http\\Adapter\\".$parsedOptions["http-adapter"];
		$httpAdapter	=	new $Adapter();
		$httpAdapter->setLog($log);
		$httpAdapter->setConfig($parsedOptions);

		//</httpAdapter>


		//<Google>

		if(in_array("google",array_keys($parsedOptions))){

			$google	=	new http\webservice\Google($httpAdapter,$log);
			$google->setConfig($parsedOptions);

			$userTotal	=	(isset($parsedOptions["google-max-results"]))	?	$parsedOptions["google-max-results"]	:	0;

			try{

				$sites	=	array();
				$total	=	0;
				$offset	=	(isset($parsedOptions["google-offset"]))	?	$parsedOptions["google-offset"]	:	0;

				do{

					if($offset>0){

						$google->setStart($offset);

					}

					$result = $google->search();

					if(isset($result->responseData->cursor->estimatedResultCount)){

						$total = $result->responseData->cursor->estimatedResultCount - $offset;

						if($userTotal==0){
							$userTotal = $total;
						}

					}

					foreach($result->responseData->results as $searchResult){

						$url = new \aidSQL\http\Url($searchResult->visibleUrl);

						if(!in_array($url,$sites)){
							$sites[] = $url;
						}

					}

					$offset+=8;

				}while($offset<$total && $offset<$userTotal);

			}catch(\Exception $e){

				$log->log($e->getMessage(),1,"red",FALSE);

			}

		}

		//</Google>

		if(isset($parsedOptions["shuffle"])){

			shuffle($sites);

		}


		if(isset($parsedOptions["omit-sites"])){

			filterSites($sites,$log,$parsedOptions["omit-sites"]);

		}


		foreach($sites as $url){

			//<urlconfig>

			if(isset($parsedOptions["url-var-separator"])){

				$url->setSeparator=$parsedOptions["url-var-separator"];

			}


			if(isset($parsedOptions["url-query-indicator"])){

				$url->setQueryIndicator($parsedOptions["url-query-indicator"]);

			}


			if(isset($parsedOptions["url-equality-operator"])){

				$url->setEqualityOperator($parsedOptions["url-equality-operator"]);

			}

			//</urlconfig>

			$crawler			=	new http\Crawler($httpAdapter,$url,$log);
			$crawler->setConfig($parsedOptions);

			//To crawl url or not to crawl, that is the question!

			if(!in_array("no-crawl",array_keys($parsedOptions))){

				$log->log("Crawling ...",0,"light_green");
				$crawler->crawl();

			}

			//Fetch url list, btw this array also contains the current URL, seemless!

			$urls	=	$crawler->getUrlList(TRUE);

			$count	=	1;


			foreach($urls as $key=>$_url){

				if(!sizeof($_url["url"]->getQueryAsArray())){

					unset($urls[$key]);

				}

			}

			if(in_array("list-links",$parameters)){

				$log->log("LINK LIST",0,"light_cyan");
				$log->log("------------------------------------------------",0,"light_cyan");

			}

			if(sizeof($urls)){

				//Test crawled links for vulnerabilities

				foreach($urls as $_url){

					$log->log($count++.'. {'.$_url["url"]."}\t\t".'{'.$_url["method"].'}',0,"light_cyan",TRUE);

					if(in_array("list-links",$parameters)){

						continue;

					}

					$httpAdapter->setUrl($_url["url"]);
					$httpAdapter->setMethod($_url["method"]);

					$result	=	isVulnerable($cmdParser,$httpAdapter,$crawler,$log,$pLoader);

					if($result && (bool)$parsedOptions["immediate-mode"]){

						break;

					}else{

						$log->log("Failed to perform injection :(",1,"red");

					}

				}

			}else{ //if(sizeof($links))

				$log->setPrepend("[aidSQL]");
				$log->log("Not enough links to check if the site is vulnerable :/",1,"red");

			}

		}

	}catch(\Exception $e){

		$log->setEcho(TRUE);
		$log->log($e->getMessage(),1,"light_red");
		exit(1);

	}

?>
