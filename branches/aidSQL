#!/usr/bin/php
<?php

	namespace aidSQL;

	/**
	 * @todo Implement spl_autoload
	 * @todo Analyze script performance with xdebug
	 *
	 */

	error_reporting(E_ALL);
	ini_set("display_errors","On");

	function checkPHPVersion(){

		$version		= substr(PHP_VERSION,0,strpos(PHP_VERSION,"."));
		$subversion	= substr(PHP_VERSION,strpos(PHP_VERSION,".")+1);
		$subversion	= substr($subversion,0,strpos($subversion,"."));

		if($version != 5 || $subversion < 3){

			return FALSE;

		}

		return TRUE;

	}

	if(!checkPHPVersion()){

		echo "Sorry but you need at least version 5.3.0 in order to run aidSQL :(\n";
		exit(1);

	}

	define ("__CLASSPATH","lib/aidSQL/");

	set_include_path(__CLASSPATH.PATH_SEPARATOR.get_include_path());



	//Interfaces
	require	"interface/Parser.interface.php";
	require	"interface/http/Adapter.interface.php";
	require	"interface/plugin/Injection.interface.php";
	require	"interface/plugin/Disclosure.interface.php";

	//Core
	require	"class/core/String.class.php";
	require	"class/core/Dom.class.php";
	require	"class/core/Logger.class.php";
	require	"class/core/File.class.php";
	require	"class/core/Runner.class.php";
	require	"class/core/PluginLoader.class.php";
	require	"class/core/InjectionPlugin.class.php";
	require	"class/core/DisclosurePlugin.class.php";
	require	"class/core/DisclosureResult.class.php";

	//HTTP 
	require	"class/http/Url.class.php";
	require	"class/http/adapter/Ecurl.class.php";
	require	"class/http/Crawler.class.php";
	require	"class/http/webservice/bing/Bing.class.php";
	require	"class/http/webservice/google/Google.class.php";

	//Config 
	require	"config/config.php";
	
	//Parsers
	require	"class/parser/CmdLine.class.php";
	require	"class/parser/Nmap.class.php";

	//Functions
	require	"functions/launcher.functions.php";

	$log	=	new core\Logger();
	$log->setEcho(TRUE);

	try{

		unset($_SERVER["argv"][0]);

		$sites			=	array();
		$links			=	array();
		banner($log);
		$log->setPrepend("[aidSQL]");
		$parameters		=	mergeConfig($_SERVER["argv"],"etc/aidSQL/aidSQL.conf");
		$cmdParser		=	new parser\CmdLine($config,$parameters);
		$parsedOptions	=	$cmdParser->getParsedOptions();

	}catch(\Exception $e){

		usageShort($log);
		$log->log($e->getMessage(),1,"red");
		exit(1);

	}


	try {

		$log->setColors((bool)$parsedOptions["colors"]);

		if(isset($parsedOptions["log-save"])){
			$log->setFilename($parsedOptions["log-save"]);
		}


		if(!empty($parsedOptions["url"])){

			$sites[0]	=	new \aidSQL\http\Url ($parsedOptions["url"]); 

		}

		//Instance of the http adapter, shared by aggregation through all classes

		//<httpAdapter>

		$Adapter			=	"\\aidSQL\\http\\Adapter\\".$parsedOptions["http-adapter"];
		$httpAdapter	=	new $Adapter();

		$httpAdapter->setLog($log);
		$httpAdapter->setMethod(strtoupper($parsedOptions["http-method"]));
		$httpAdapter->setFollowRedirects($parsedOptions["follow-redirects"]);

		if(isset($parsedOptions["connect-timeout"])){

			$httpAdapter->setConnectTimeout($parsedOptions["connect-timeout"]);

		}


		if(isset($parsedOptions["request-interval"])&&$parsedOptions["request-interval"]>0){

			$httpAdapter->setRequestInterval($parsedOptions["request-interval"]);

		}


		if(isset($parsedOptions["log-prepend-date"])){

			$log->useLogDate($parsedOptions["log-prepend-date"]);

		}

		//</httpAdapter>


		//<Google>

		if(in_array("google",array_keys($parsedOptions))){

			$google	=	new http\webservice\Google($httpAdapter,$log);
			$google->setQuery($parsedOptions["google"]);

			(isset($parsedOptions["google-language"])) ? $google->setLanguage($parsedOptions["google-language"]) : NULL;

			$offset		=	(isset($parsedOptions["google-offset"]))			? $parsedOptions["google-offset"] : 0;
			$userTotal	=	(isset($parsedOptions["google-max-results"]))	? $parsedOptions["google-max-results"] : 0;
			
			$sites = googleSearch($google,$offset,$userTotal);

			if(isset($parsedOptions["google-shuffle-sites"])){
				shuffle($sites);
			}

		}

		//</Google>


		if(isset($parsedOptions["omit-sites"])){

			filterSites($sites,$log,$parsedOptions["omit-sites"]);

		}


		foreach($sites as $url){


			//<urlconfig>

			if(isset($parsedOptions["url-var-separator"])){

				$url->setSeparator=$parsedOptions["url-var-separator"];

			}


			if(isset($parsedOptions["url-query-indicator"])){

				$url->setQueryIndicator($parsedOptions["url-query-indicator"]);

			}


			if(isset($parsedOptions["url-equality-operator"])){

				$url->setEqualityOperator($parsedOptions["url-equality-operator"]);

			}

			//</urlconfig>

			$httpAdapter->setUrl($url);

			$crawler			=	new http\Crawler($httpAdapter,$log);

			//URL WITH CMDLINE PARAMETERS
			if(sizeof($url->getQueryAsArray())){
				$crawler->addUrl($url);
			}

			if(isset($parsedOptions["lpp"])){

				$crawler->setLinksPerPage($parsedOptions["lpp"]);

			}


			if(isset($parsedOptions["max-links"])){

				$crawler->setMaxLinks($parsedOptions["max-links"]);

			}


			if(isset($parsedOptions["page-types"])){

				$crawler->addPageTypes(explode(",",$parsedOptions["page-types"]));

			}


			if(isset($parsedOptions["omit-paths"])){

				$omitPaths = explode(",",$parsedOptions["omit-paths"]);
				$crawler->addOmitPaths($omitPaths);

			}


			if(isset($parsedOptions["omit-pages"])){

				$omitPages = explode(",",$parsedOptions["omit-pages"]);
				$crawler->addOmitPages($omitPages);

			}

			if(isset($parsedOptions["crawl"])){

				$crawler->setDepth($parsedOptions["crawl"]);

			}

			$parsedOptions	=	$cmdParser->getParsedOptions();

			if(!in_array("no-crawl",array_keys($parsedOptions))){
				$crawler->crawl();
			}


			$urls	=	$crawler->getUrlList(TRUE);

			$count	=	1;

			foreach($urls as $key=>$_url){

				if(sizeof($_url["url"]->getQueryAsArray())){

					$log->log($count++.'. {'.$_url["url"]."}\t\t".'{'.$_url["method"].'}',0,"light_cyan");

				}else{

					unset($urls[$key]);

				}

			}


			if(sizeof($urls)){

				//Test crawled links

				foreach($urls as $_url){

					$httpAdapter->setUrl($_url["url"]);
					$httpAdapter->setMethod($_url["method"]);

					$result	=	isVulnerable($cmdParser,$httpAdapter,$crawler,$log);

					if($result && (bool)$parsedOptions["immediate-mode"]){

						break;

					}else{

						$log->log("Failed to perform injection :(",1,"red");

					}

				}

			}else{ //if(sizeof($links))

				$log->setPrepend("[aidSQL]");
				$log->log("Not enough links to check if the site is vulnerable :/",1,"red");

			}

		}

	}catch(\Exception $e){

		$log->log($e->getMessage(),1,"light_red");
		exit(1);

	}

?>
